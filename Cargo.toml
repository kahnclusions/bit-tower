[package]
name = "bittower"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[profile.release]
codegen-units = 1
lto = true
opt-level = 'z'

[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1

[dependencies]
leptos = { git = "https://github.com/leptos-rs/leptos", features = [
    "nightly",
    "tracing",
] }
leptos_meta = { git = "https://github.com/leptos-rs/leptos" }
leptos_router = { git = "https://github.com/leptos-rs/leptos", features = [
    "nightly",
] }
leptos_axum = { git = "https://github.com/leptos-rs/leptos", optional = true }
leptos_icons = { git = "https://github.com/kahnclusions/leptos-icons.git"}

icondata = "0.4.0"
icondata_core = "0.1.0"
humantime = "2.1.0"
simple_crypt = { version = "0.2.3", optional = true }
bincode      = { version = "1.3.3", optional = true }
base64       = { version = "0.22.1", optional = true }
anyhow = { version = "1.0.86", features = ["backtrace"] }
cfg-if = "1"
chrono = { version = "0.4.38", features = ["serde"] }
console_error_panic_hook = "0.1.7"
human_bytes = "0.4.3"
rust_decimal = "1.35.0"
http = { version = "1" }
serde = { version = "1", features = ["derive"] }
serde_json = "1.0"
tailwind_fuse = { version = "0.3.1", features = ["variant"] }
thiserror = "1"
tracing = { version = "0.1" }
tracing-wasm = { version = "0.2.1" }
tokio = { version = "1.33.0", features = ["full"], optional = true }
tower = { version = "0.4.13", features = ["full"], optional = true }
tower-http = { version = "0.5", features = ["fs", "trace", "compression-gzip", "compression-br"], optional = true }
uuid = { version = "1.9.0", features = [
    "v4",
    "serde",
    "fast-rng",
    "macro-diagnostics",
    "v7",
    "js"
] }
wasm-bindgen = "=0.2.93"
wasm-bindgen-futures = { version = "0.4.42" }
codee = { version = "0.1.2", features = ["msgpack_serde"] }
web-sys = "0.3.69"
js-sys = "0.3.69"
default-struct-builder = "0.5"
reqwest = { version = "0.12.7", features = ["json", "cookies"] }
axum = { version = "0.7.5", features = ["ws", "http2", "macros"], optional = true }
axum-extra = { version = "0.9.3", features = ["cookie", "typed-header"], optional = true }
rust-embed = { version = "8", features = [
  "compression",
  "mime_guess",
    "include-exclude"
] }
futures = { version = "0.3.30", optional = true }
cookie = { version = "0.18.1", features = ["secure"], optional = true }
tracing-subscriber = { version = "0.3", features = ["fmt"], optional = true }
mime_guess = { version = "2.0.4" , optional = true }
rmp-serde =  { version = "1.3.0" , optional = true }

[features]
default = []
hydrate = [
    "leptos/hydrate" 
    # "dep:wasm-bindgen", 
    # "dep:wasm-bindgen-futures"

]
ssr = [
    "leptos/ssr", 
    "leptos_meta/ssr", 
    "leptos_router/ssr", 
    "rust-embed/axum",
    "rust-embed/tokio",
    "dep:leptos_axum", 
    "dep:simple_crypt", 
    "dep:bincode", 
    "dep:base64",
    "dep:axum",
    "dep:tower",
    "dep:tower-http",
    "dep:tokio",
    "dep:axum-extra",
    # "dep:rust-embed",
    "dep:futures",
    "dep:cookie",
    "dep:tracing-subscriber",
    "dep:mime_guess",
    "dep:rmp-serde"
]

[package.metadata.leptos]
output-name = "bittower"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
hash-files = false

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
tailwind-input-file = "src/app/app.css"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "0.0.0.0:3010"

# The port to use for automatic reload monitoring
reload-port = 3011

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
lib-profile-release = "wasm-release"
